<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".module.Java_Module2_6">

    <TextView
        android:id="@+id/textView126"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="15dp"
        android:layout_marginTop="30dp"
        android:fontFamily="@font/poppins_bold"
        android:text=" Java continue Statement"
        android:textSize="20sp"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/textView128"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textView126"
        android:layout_marginStart="15dp"
        android:layout_marginTop="10dp"
        android:text="While working with loops, sometimes you might want to skip some statements or terminate the loop. In such cases, break and continue statements are used.  To learn about the break statement, visit Java break. Here, we will learn about the continue statement."
        android:textSize="12sp" />

    <TextView
        android:id="@+id/textView129"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textView128"
        android:layout_marginStart="15dp"
        android:layout_marginTop="10dp"
        android:fontFamily="@font/poppins_bold"
        android:text="Java continue"
        android:textSize="16sp"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/textView130"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textView129"
        android:layout_marginStart="15dp"
        android:layout_marginTop="10dp"
        android:text="The continue statement skips the current iteration of a loop (for, while, do...while, etc).  After the continue statement, the program moves to the end of the loop. And, test expression is evaluated (update statement is evaluated in case of the for loop).  Here's the syntax of the continue statement.  "
        android:textSize="12sp" />

    <TextView
        android:id="@+id/textView131"
        android:layout_width="380dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textView130"
        android:layout_centerHorizontal="true"
        android:layout_marginStart="15dp"
        android:layout_marginTop="10dp"
        android:background="@color/black"
        android:text="\ncontinue;\n"
        android:textColor="@color/white"
        android:textSize="12sp" />

    <TextView
        android:id="@+id/textView132"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/textView131"
        android:layout_marginStart="15dp"
        android:layout_marginTop="10dp"
        android:text="Note: The use of labeled continue is often discouraged as it makes your code hard to understand. If you are in a situation where you have to use labeled continue, refactor your code and try to solve it in a different way to make it more readable."
        android:textSize="12sp" />

    <TextView
        android:id="@+id/btn_tap_to_next8"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="30dp"
        android:fontFamily="@font/poppins_regular"
        android:text="All Done!"
        android:textSize="16sp" />

</RelativeLayout>